diff --git a/optimizely/helpers/condition.py b/optimizely/helpers/condition.py
index f7ea644..931dc8a 100644
--- a/optimizely/helpers/condition.py
+++ b/optimizely/helpers/condition.py
@@ -153,6 +153,18 @@ class CustomAttributeConditionEvaluator(object):
             - if the user version value format is not a valid semantic version.
         """
 
+        if not isinstance(target_version, string_types):
+            self.logger.warning(audience_logs.UNKNOWN_CONDITION_VALUE.format(self._get_condition_json(0), ))
+            return None
+
+        if not isinstance(user_version, string_types):
+            self.logger.warning(
+                audience_logs.UNEXPECTED_TYPE.format(
+                    self._get_condition_json(0), type(user_version), user_version
+                )
+            )
+            return None
+
         target_version_parts = self.split_version(target_version)
         if target_version_parts is None:
             return None
diff --git a/tests/helpers_tests/test_condition.py b/tests/helpers_tests/test_condition.py
index 7a7cf69..424e831 100644
--- a/tests/helpers_tests/test_condition.py
+++ b/tests/helpers_tests/test_condition.py
@@ -29,14 +29,18 @@ semver_equal_2_condition_list = [['Android', "2", 'custom_attribute', 'semver_eq
 semver_equal_2_0_condition_list = [['Android', "2.0", 'custom_attribute', 'semver_eq']]
 semver_equal_2_0_1_beta_condition_list = [['Android', "2.0.1-beta", 'custom_attribute', 'semver_eq']]
 semver_greater_than_2_0_0_condition_list = [['Android', "2.0.0", 'custom_attribute', 'semver_gt']]
+semver_greater_than_2_0_condition_list = [['Android', "2.0", 'custom_attribute', 'semver_gt']]
 semver_greater_than_2_0_0_beta_condition_list = [['Android', "2.0.0-beta", 'custom_attribute', 'semver_gt']]
 semver_greater_than_or_equal_2_0_9_beta_condition_list = [['Android', "2.0.9-beta", 'custom_attribute', 'semver_ge']]
 semver_greater_than_or_equal_2_0_9_condition_list = [['Android', "2.0.9", 'custom_attribute', 'semver_ge']]
 semver_less_than_2_0_0_condition_list = [['Android', "2.0.0", 'custom_attribute', 'semver_lt']]
+semver_less_than_2_0_condition_list = [['Android', "2.0", 'custom_attribute', 'semver_lt']]
 semver_less_than_2_0_0_release_condition_list = [['Android', "2.0.0-release", 'custom_attribute', 'semver_lt']]
 semver_less_than_2_0_0_beta_condition_list = [['Android', "2.0.0-beta", 'custom_attribute', 'semver_lt']]
 semver_less_than_or_equal_2_0_1_beta_condition_list = [['Android', "2.0.1-beta", 'custom_attribute', 'semver_le']]
 semver_less_than_or_equal_2_0_1_condition_list = [['Android', "2.0.1", 'custom_attribute', 'semver_le']]
+semver_less_than_or_equal_2_0_condition_list = [['Android', "2.0", 'custom_attribute', 'semver_le']]
+semver_greater_than_or_equal_2_0_condition_list = [['Android', "2.0", 'custom_attribute', 'semver_ge']]
 
 exists_condition_list = [['input_value', None, 'custom_attribute', 'exists']]
 exact_string_condition_list = [['favorite_constellation', 'Lacerta', 'custom_attribute', 'exact']]
@@ -126,264 +130,192 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
         self.assertIsNone(evaluator.evaluate(0))
 
-    def test_evaluate__returns_true__when_user_version_2_matches_target_version_2(self):
-
-        evaluator = condition_helper.CustomAttributeConditionEvaluator(
-            semver_equal_2_condition_list, {'Android': '2'}, self.mock_client_logger
-        )
-
-        self.assertStrictTrue(evaluator.evaluate(0))
-
-    def test_evaluate__returns_true__when_user_version_2_2_matches_target_version_2(self):
-
-        evaluator = condition_helper.CustomAttributeConditionEvaluator(
-            semver_equal_2_condition_list, {'Android': '2.2'}, self.mock_client_logger
-        )
-
-        self.assertStrictTrue(evaluator.evaluate(0))
-
-    def test_evaluate__returns_true__when_user_version_2_0_matches_target_version_2_0(self):
-
-        evaluator = condition_helper.CustomAttributeConditionEvaluator(
-            semver_equal_2_0_condition_list, {'Android': '2.0'}, self.mock_client_logger
-        )
-
-        self.assertStrictTrue(evaluator.evaluate(0))
-
-    def test_evaluate__returns_true__when_user_version_2_0_0_matches_target_version_2_0_0(self):
-
-        evaluator = condition_helper.CustomAttributeConditionEvaluator(
-            semver_equal_2_0_0_condition_list, {'Android': '2.0.0'}, self.mock_client_logger
-        )
-
-        self.assertStrictTrue(evaluator.evaluate(0))
-
-    def test_evaluate__returns_false__when_user_version_2_0_does_not_match_target_version_2_0(self):
-
-        evaluator = condition_helper.CustomAttributeConditionEvaluator(
-            semver_equal_2_0_0_condition_list, {'Android': '2.0'}, self.mock_client_logger
-        )
-
-        self.assertStrictFalse(evaluator.evaluate(0))
-
-    def test_evaluate__returns_true__when_user_version_2_0_0_release_is_greater_than_target_version_2_0_0_beta(
-            self):
-
-        evaluator = condition_helper.CustomAttributeConditionEvaluator(
-            semver_greater_than_2_0_0_beta_condition_list, {'Android': '2.0.0-release'}, self.mock_client_logger
-        )
-
-        self.assertStrictTrue(evaluator.evaluate(0))
-
-    def test_evaluate__returns_true__when_user_version_2_0_1_is_greater_than_target_version__2_0_0(self):
-
-        evaluator = condition_helper.CustomAttributeConditionEvaluator(
-            semver_greater_than_2_0_0_condition_list, {'Android': '2.0.1'}, self.mock_client_logger
-        )
-
-        self.assertStrictTrue(evaluator.evaluate(0))
-
-    def test_evaluate__returns_true__when_user_version_1_9_9_is_less_than_target_version_2_0_0(self):
-
-        evaluator = condition_helper.CustomAttributeConditionEvaluator(
-            semver_less_than_2_0_0_condition_list, {'Android': '1.9.9'}, self.mock_client_logger
-        )
-
-        self.assertStrictTrue(evaluator.evaluate(0))
-
-    def test_evaluate__returns_true__when_user_version_2_0_0_release_is_less_than_target_version_2_0_0(self):
-
-        evaluator = condition_helper.CustomAttributeConditionEvaluator(
-            semver_less_than_2_0_0_condition_list, {'Android': '2.0.0-release'}, self.mock_client_logger
-        )
-
-        self.assertStrictTrue(evaluator.evaluate(0))
-
-    def test_evaluate__returns_true__when_user_version_2_0_0_beta_is_less_than_target_version_2_0_0_release(self):
-
-        evaluator = condition_helper.CustomAttributeConditionEvaluator(
-            semver_less_than_2_0_0_release_condition_list, {'Android': '2.0.0-beta'}, self.mock_client_logger
-        )
-
-        self.assertStrictTrue(evaluator.evaluate(0))
-
-    def test_evaluate__returns_false__when_user_version_2_0_0_release_is_not_less_than_target_version_2_0_0_beta(self):
-
-        evaluator = condition_helper.CustomAttributeConditionEvaluator(
-            semver_less_than_2_0_0_beta_condition_list, {'Android': '2.0.0-release'}, self.mock_client_logger
-        )
-
-        self.assertStrictFalse(evaluator.evaluate(0))
-
-    def test_evaluate__returns_true__when_user_version_2_0_9_is_greater_than_or_equal_to_target_version_2_0_9(self):
-
-        evaluator = condition_helper.CustomAttributeConditionEvaluator(
-            semver_greater_than_or_equal_2_0_9_condition_list, {'Android': '2.0.9'}, self.mock_client_logger
-        )
-
-        self.assertStrictTrue(evaluator.evaluate(0))
-
-    def test_evaluate__returns_true__when_user_version_2_3_is_greater_than_or_equal_to_target_version_2_0_9(self):
-
-        evaluator = condition_helper.CustomAttributeConditionEvaluator(
-            semver_greater_than_or_equal_2_0_9_condition_list, {'Android': '2.3'}, self.mock_client_logger
-        )
-
-        self.assertStrictTrue(evaluator.evaluate(0))
-
-    def test_evaluate__returns_true__when_user_version_2_0_9_beta_is_greater_than_or_equal_to_target_version_2_0_9_beta(
-            self):
-
-        evaluator = condition_helper.CustomAttributeConditionEvaluator(
-            semver_greater_than_or_equal_2_0_9_beta_condition_list, {'Android': '2.0.9-beta'}, self.mock_client_logger
-        )
-
-        self.assertStrictTrue(evaluator.evaluate(0))
-
-    def test_evaluate__returns_false__when_user_version_1_0_0_is_not_greater_than_or_equal_to_target_version_2_0_9(
-            self):
-
-        evaluator = condition_helper.CustomAttributeConditionEvaluator(
-            semver_greater_than_or_equal_2_0_9_condition_list, {'Android': '1.0.0'}, self.mock_client_logger
-        )
-
-        self.assertStrictFalse(evaluator.evaluate(0))
-
-    def test_evaluate__returns_true__when_user_version_2_0_1_is_less_than_or_equal_to_target_version_2_0_1(self):
-
-        evaluator = condition_helper.CustomAttributeConditionEvaluator(
-            semver_less_than_or_equal_2_0_1_condition_list, {'Android': '2.0.1'}, self.mock_client_logger
-        )
-
-        self.assertStrictTrue(evaluator.evaluate(0))
-
-    def test_evaluate__returns_true__when_user_version_1_1_is_less_than_or_equal_to_target_version_2_0_1(self):
-
-        evaluator = condition_helper.CustomAttributeConditionEvaluator(
-            semver_less_than_or_equal_2_0_1_condition_list, {'Android': '1.1'}, self.mock_client_logger
-        )
-
-        self.assertStrictTrue(evaluator.evaluate(0))
-
-    def test_evaluate__returns_true__when_user_version_2_0_1_beta_is_less_than_or_equal_to_target_version_2_0_1(self):
-
-        evaluator = condition_helper.CustomAttributeConditionEvaluator(
-            semver_less_than_or_equal_2_0_1_condition_list, {'Android': '2.0.1-beta'}, self.mock_client_logger
-        )
-
-        self.assertStrictTrue(evaluator.evaluate(0))
-
-    def test_evaluate__returns_false__when_user_version_3_0_1_is_not_less_than_or_equal_to_target_version_2_0_1(self):
-
-        evaluator = condition_helper.CustomAttributeConditionEvaluator(
-            semver_less_than_or_equal_2_0_1_condition_list, {'Android': '3.0.1'}, self.mock_client_logger
-        )
-
-        self.assertStrictFalse(evaluator.evaluate(0))
-
-    def test_evaluate__returns_null__when_no_user_version_provided(self):
-
-        evaluator = condition_helper.CustomAttributeConditionEvaluator(
-            semver_equal_2_0_condition_list, {}, self.mock_client_logger
-        )
-
-        self.assertIsNone(evaluator.evaluate(0))
-
-    def test_evaluate__returns_null__when_user_provided_version_is_null(self):
-
-        evaluator = condition_helper.CustomAttributeConditionEvaluator(
-            semver_equal_2_0_condition_list, {'Android': None}, self.mock_client_logger
-        )
-
-        self.assertIsNone(evaluator.evaluate(0))
-
-    def test_evaluate__returns_exception__when_user_provided_version_is_invalid1(self):
-
-        condition_helper.CustomAttributeConditionEvaluator(
-            semver_equal_2_0_condition_list, {'Android': "+"}, self.mock_client_logger
-        )
-
-        self.assertRaises(Exception)
-
-    def test_evaluate__returns_exception__when_user_provided_version_is_invalid2(self):
-
-        condition_helper.CustomAttributeConditionEvaluator(
-            semver_equal_2_0_condition_list, {'Android': "+--"}, self.mock_client_logger
-        )
-
-        self.assertRaises(Exception)
-
-    def test_evaluate__returns_exception__when_user_provided_version_is_invalid3(self):
-
-        condition_helper.CustomAttributeConditionEvaluator(
-            semver_equal_2_0_condition_list, {'Android': "...+"}, self.mock_client_logger
-        )
-
-        self.assertRaises(Exception)
-
-    def test_evaluate__returns_exception__when_user_provided_version_is_invalid4(self):
-
-        condition_helper.CustomAttributeConditionEvaluator(
-            semver_equal_2_0_condition_list, {'Android': "+test"}, self.mock_client_logger
-        )
-
-        self.assertRaises(Exception)
-
-    def test_evaluate__returns_exception__when_user_provided_version_is_invalid5(self):
-
-        condition_helper.CustomAttributeConditionEvaluator(
-            semver_equal_2_0_condition_list, {'Android': "3.6"}, self.mock_client_logger
-        )
-
-        self.assertRaises(Exception)
-
-    def test_evaluate__returns_exception__when_user_provided_version_is_invalid6(self):
-
-        condition_helper.CustomAttributeConditionEvaluator(
-            semver_equal_2_0_condition_list, {'Android': "2"}, self.mock_client_logger
-        )
-
-        self.assertRaises(Exception)
+    def test_evaluate__returns_true__when_user_version_matches_target_version(self):
+        user_versions = ['2.0.0', '2.0']
+        for user_version in user_versions:
+            evaluator = condition_helper.CustomAttributeConditionEvaluator(
+                semver_equal_2_0_condition_list, {'Android': user_version}, self.mock_client_logger)
+            result = evaluator.evaluate(0)
+            custom_err_msg = "Got {} in result. Failed for user version: {}".format(result, user_version)
+            self.assertEquals(result, True, custom_err_msg)
 
-    def test_evaluate__returns_exception__when_user_provided_version_is_invalid7(self):
+    def test_evaluate__returns_false__when_user_version_matches_target_version(self):
+        user_versions = ['2.9', '1.9']
+        for user_version in user_versions:
+            evaluator = condition_helper.CustomAttributeConditionEvaluator(
+                semver_equal_2_0_condition_list, {'Android': user_version}, self.mock_client_logger)
+            result = evaluator.evaluate(0)
+            custom_err_msg = "Got {} in result. Failed for user version: {}".format(result, user_version)
+            self.assertEquals(result, False, custom_err_msg)
 
-        condition_helper.CustomAttributeConditionEvaluator(
-            semver_equal_2_0_condition_list, {'Android': "3.90"}, self.mock_client_logger
-        )
+    def test_evaluate__returns_true__when_user_version_less_than_or_equal_to_target_version(self):
+        user_versions = ['2.0.0', '1.9']
+        for user_version in user_versions:
+            evaluator = condition_helper.CustomAttributeConditionEvaluator(
+                semver_less_than_or_equal_2_0_condition_list, {'Android': user_version}, self.mock_client_logger)
+            result = evaluator.evaluate(0)
+            custom_err_msg = "Got {} in result. Failed for user version: {}".format(result, user_version)
+            self.assertEquals(result, True, custom_err_msg)
 
-        self.assertRaises(Exception)
+    def test_evaluate__returns_false__when_user_version_less_than_or_equal_to_target_version(self):
+        user_versions = ['2.5.1']
+        for user_version in user_versions:
+            evaluator = condition_helper.CustomAttributeConditionEvaluator(
+                semver_less_than_or_equal_2_0_condition_list, {'Android': user_version}, self.mock_client_logger)
+            result = evaluator.evaluate(0)
+            custom_err_msg = "Got {} in result. Failed for user version: {}".format(result, user_version)
+            self.assertEquals(result, False, custom_err_msg)
 
-    def test_evaluate__returns_exception__when_user_provided_version_is_invalid8(self):
+    def test_evaluate__returns_true__when_user_version_greater_than_or_equal_to_target_version(self):
+        user_versions = ['2.0.0', '2.9']
+        for user_version in user_versions:
+            evaluator = condition_helper.CustomAttributeConditionEvaluator(
+                semver_greater_than_or_equal_2_0_condition_list, {'Android': user_version}, self.mock_client_logger)
+            result = evaluator.evaluate(0)
+            custom_err_msg = "Got {} in result. Failed for user version: {}".format(result, user_version)
+            self.assertEquals(result, True, custom_err_msg)
 
-        condition_helper.CustomAttributeConditionEvaluator(
-            semver_equal_2_0_condition_list, {'Android': "3.90.2.8"}, self.mock_client_logger
-        )
+    def test_evaluate__returns_false__when_user_version_greater_than_or_equal_to_target_version(self):
+        user_versions = ['1.9']
+        for user_version in user_versions:
+            evaluator = condition_helper.CustomAttributeConditionEvaluator(
+                semver_greater_than_or_equal_2_0_condition_list, {'Android': user_version}, self.mock_client_logger)
+            result = evaluator.evaluate(0)
+            custom_err_msg = "Got {} in result. Failed for user version: {}".format(result, user_version)
+            self.assertEquals(result, False, custom_err_msg)
 
-        self.assertRaises(Exception)
+    def test_evaluate__returns_true__when_user_version_less_than_target_version(self):
+        user_versions = ['1.9']
+        for user_version in user_versions:
+            evaluator = condition_helper.CustomAttributeConditionEvaluator(
+                semver_less_than_2_0_condition_list, {'Android': user_version}, self.mock_client_logger)
+            result = evaluator.evaluate(0)
+            custom_err_msg = "Got {} in result. Failed for user version: {}".format(result, user_version)
+            self.assertEquals(result, True, custom_err_msg)
 
-    def test_evaluate__returns_exception__when_user_provided_version_is_invalid9(self):
+    def test_evaluate__returns_false__when_user_version_less_than_target_version(self):
+        user_versions = ['2.0.0', '2.5.1']
+        for user_version in user_versions:
+            evaluator = condition_helper.CustomAttributeConditionEvaluator(
+                semver_less_than_2_0_condition_list, {'Android': user_version}, self.mock_client_logger)
+            result = evaluator.evaluate(0)
+            custom_err_msg = "Got {} in result. Failed for user version: {}".format(result, user_version)
+            self.assertEquals(result, False, custom_err_msg)
 
-        condition_helper.CustomAttributeConditionEvaluator(
-            semver_equal_2_0_condition_list, {'Android': "-2.4"}, self.mock_client_logger
-        )
+    def test_evaluate__returns_true__when_user_version_greater_than_target_version(self):
+        user_versions = ['2.9']
+        for user_version in user_versions:
+            evaluator = condition_helper.CustomAttributeConditionEvaluator(
+                semver_greater_than_2_0_condition_list, {'Android': user_version}, self.mock_client_logger)
+            result = evaluator.evaluate(0)
+            custom_err_msg = "Got {} in result. Failed for user version: {}".format(result, user_version)
+            self.assertEquals(result, True, custom_err_msg)
 
-        self.assertRaises(Exception)
+    def test_evaluate__returns_false__when_user_version_greater_than_target_version(self):
+        user_versions = ['2.0.0', '1.9']
+        for user_version in user_versions:
+            evaluator = condition_helper.CustomAttributeConditionEvaluator(
+                semver_greater_than_2_0_condition_list, {'Android': user_version}, self.mock_client_logger)
+            result = evaluator.evaluate(0)
+            custom_err_msg = "Got {} in result. Failed for user version: {}".format(result, user_version)
+            self.assertEquals(result, False, custom_err_msg)
 
-    def test_evaluate__returns_exception__when_user_provided_version_is_invalid10(self):
+    def test_evaluate__returns_None__when_user_version_is_not_string(self):
+        user_versions = [True, 37]
+        for user_version in user_versions:
+            evaluator = condition_helper.CustomAttributeConditionEvaluator(
+                semver_greater_than_2_0_condition_list, {'Android': user_version}, self.mock_client_logger)
+            result = evaluator.evaluate(0)
+            custom_err_msg = "Got {} in result. Failed for user version: {}".format(result, user_version)
+            self.assertIsNone(result, custom_err_msg)
 
-        condition_helper.CustomAttributeConditionEvaluator(
-            semver_equal_2_0_condition_list, {'Android': True}, self.mock_client_logger
-        )
+    def test_evaluate__returns_None__when_user_version_with_invalid_semantic(self):
+        user_versions = ['3.7.2.2', '+']
+        for user_version in user_versions:
+            evaluator = condition_helper.CustomAttributeConditionEvaluator(
+                semver_greater_than_2_0_condition_list, {'Android': user_version}, self.mock_client_logger)
+            result = evaluator.evaluate(0)
+            custom_err_msg = "Got {} in result. Failed for user version: {}".format(result, user_version)
+            self.assertIsNone(result, custom_err_msg)
 
-        self.assertRaises(Exception)
+    def test_compare_user_version_with_target_version_equal_to_0(self):
+        versions = [
+            ('2.0.1', '2.0.1'),
+            ('2.0.0', '2.0.0'),
+            ('2.9', '2.9.1'),
+            ('2.9.9', '2.9.9'),
+            ('2.9.9-beta', '2.9.9-beta'),
+            ('2.1', '2.1.0'),
+            ('2.1', '2.1.215'),
+            ('2', '2.12'),
+            ('2', '2.785.13')
+        ]
+        for user_version, target_version in versions:
+            evaluator = condition_helper.CustomAttributeConditionEvaluator(
+                semver_greater_than_2_0_condition_list, {'Android': user_version}, self.mock_client_logger)
+            result = evaluator.compare_user_version_with_target_version(user_version, target_version)
+            custom_err_msg = "Got {} in result. Failed for user version: {} and target version: {}".format(result, user_version, target_version)
+            self.assertEquals(result, 0, custom_err_msg)
+
+    def test_compare_user_version_with_target_version_greater_than_0(self):
+        versions = [
+            ('2.0.0', '2.0.1'),
+            ('2.0', '3.0.1'),
+            ('2.0', '2.9.1'),
+            ('2.9.0', '2.9.1'),
+            ('2.1.2', '2.1.3-beta'),
+            ('2.1.2-beta', '2.1.2-release'),
+            ('2.1.3-beta', '2.1.3')
+        ]
+        for user_version, target_version in versions:
+            evaluator = condition_helper.CustomAttributeConditionEvaluator(
+                semver_greater_than_2_0_condition_list, {'Android': user_version}, self.mock_client_logger)
+            result = evaluator.compare_user_version_with_target_version(user_version, target_version)
+            custom_err_msg = "Got {} in result. Failed for user version: {} and target version: {}".format(result, user_version, target_version)
+            self.assertEquals(result, 1, custom_err_msg)
+
+    def test_compare_user_version_with_target_version_less_than_0(self):
+        versions = [
+            ('2.0.1', '2.0.0'),
+            ('3.0', '2.0.1'),
+            ('2.3', '2.0.1'),
+            ('2.3.5', '2.3.1'),
+            ('2.9.8', '2.9'),
+            ('2.1.2-release', '2.1.2-beta'),
+            ('2.1.3', '2.1.3-beta')
+        ]
+        for user_version, target_version in versions:
+            evaluator = condition_helper.CustomAttributeConditionEvaluator(
+                semver_greater_than_2_0_condition_list, {'Android': user_version}, self.mock_client_logger)
+            result = evaluator.compare_user_version_with_target_version(user_version, target_version)
+            custom_err_msg = "Got {} in result. Failed for user version: {} and target version: {}".format(result, user_version, target_version)
+            self.assertEquals(result, -1, custom_err_msg)
+
+    def test_compare_invalid_user_version_with(self):
+        versions = [
+            '-', '.', '..', '+', '+test', ' ', '2 .3. 0', '2.', '.2.2', '3.7.2.2', '3.x', ',', '+build-prerelease'
+        ]
+        target_version = '2.1.0'
 
-    def test_evaluate__returns_exception__when_user_provided_version_is_invalid11(self):
+        for user_version in versions:
+            evaluator = condition_helper.CustomAttributeConditionEvaluator(
+                semver_greater_than_2_0_condition_list, {'Android': user_version}, self.mock_client_logger)
+            result = evaluator.compare_user_version_with_target_version(user_version, target_version)
+            custom_err_msg = "Got {} in result. Failed for user version: {}".format(result, user_version)
+            self.assertIsNone(result, custom_err_msg)
 
-        condition_helper.CustomAttributeConditionEvaluator(
-            semver_equal_2_0_condition_list, {'Android': False}, self.mock_client_logger
-        )
+    def test_compare_user_version_with_target_version_using_invalid_data(self):
+        versions = [
+            ('2.0.1', True),
+            (0, '2.0.1')
+        ]
 
-        self.assertRaises(Exception)
+        for user_version, target_version in versions:
+            evaluator = condition_helper.CustomAttributeConditionEvaluator(
+                semver_greater_than_2_0_condition_list, {'Android': user_version}, self.mock_client_logger)
+            result = evaluator.compare_user_version_with_target_version(user_version, target_version)
+            custom_err_msg = "Got {} in result. Failed for user version: {} nad target version: {}".format(result, user_version, target_version)
+            self.assertIsNone(result, custom_err_msg)
 
     def test_exists__returns_false__when_no_user_provided_value(self):
 
@@ -431,7 +363,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
         self.assertStrictTrue(evaluator.evaluate(0))
 
-    def test_exact_string__returns_true__when_user_provided_value_is_equal_to_condition_value(self,):
+    def test_exact_string__returns_true__when_user_provided_value_is_equal_to_condition_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             exact_string_condition_list, {'favorite_constellation': 'Lacerta'}, self.mock_client_logger,
@@ -439,7 +371,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
         self.assertStrictTrue(evaluator.evaluate(0))
 
-    def test_exact_string__returns_false__when_user_provided_value_is_not_equal_to_condition_value(self,):
+    def test_exact_string__returns_false__when_user_provided_value_is_not_equal_to_condition_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             exact_string_condition_list, {'favorite_constellation': 'The Big Dipper'}, self.mock_client_logger,
@@ -447,7 +379,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
         self.assertStrictFalse(evaluator.evaluate(0))
 
-    def test_exact_string__returns_null__when_user_provided_value_is_different_type_from_condition_value(self,):
+    def test_exact_string__returns_null__when_user_provided_value_is_different_type_from_condition_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             exact_string_condition_list, {'favorite_constellation': False}, self.mock_client_logger,
@@ -463,7 +395,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
         self.assertIsNone(evaluator.evaluate(0))
 
-    def test_exact_int__returns_true__when_user_provided_value_is_equal_to_condition_value(self,):
+    def test_exact_int__returns_true__when_user_provided_value_is_equal_to_condition_value(self, ):
 
         if PY2:
             evaluator = condition_helper.CustomAttributeConditionEvaluator(
@@ -484,7 +416,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
         self.assertStrictTrue(evaluator.evaluate(0))
 
-    def test_exact_float__returns_true__when_user_provided_value_is_equal_to_condition_value(self,):
+    def test_exact_float__returns_true__when_user_provided_value_is_equal_to_condition_value(self, ):
 
         if PY2:
             evaluator = condition_helper.CustomAttributeConditionEvaluator(
@@ -505,7 +437,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
         self.assertStrictTrue(evaluator.evaluate(0))
 
-    def test_exact_int__returns_false__when_user_provided_value_is_not_equal_to_condition_value(self,):
+    def test_exact_int__returns_false__when_user_provided_value_is_not_equal_to_condition_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             exact_int_condition_list, {'lasers_count': 8000}, self.mock_client_logger
@@ -513,7 +445,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
         self.assertStrictFalse(evaluator.evaluate(0))
 
-    def test_exact_float__returns_false__when_user_provided_value_is_not_equal_to_condition_value(self,):
+    def test_exact_float__returns_false__when_user_provided_value_is_not_equal_to_condition_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             exact_float_condition_list, {'lasers_count': 8000.0}, self.mock_client_logger,
@@ -521,7 +453,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
         self.assertStrictFalse(evaluator.evaluate(0))
 
-    def test_exact_int__returns_null__when_user_provided_value_is_different_type_from_condition_value(self,):
+    def test_exact_int__returns_null__when_user_provided_value_is_different_type_from_condition_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             exact_int_condition_list, {'lasers_count': 'hi'}, self.mock_client_logger
@@ -535,7 +467,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
         self.assertIsNone(evaluator.evaluate(0))
 
-    def test_exact_float__returns_null__when_user_provided_value_is_different_type_from_condition_value(self,):
+    def test_exact_float__returns_null__when_user_provided_value_is_different_type_from_condition_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             exact_float_condition_list, {'lasers_count': 'hi'}, self.mock_client_logger
@@ -592,7 +524,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
         mock_is_finite.assert_has_calls([mock.call(9000), mock.call(9000)])
 
-    def test_exact_bool__returns_true__when_user_provided_value_is_equal_to_condition_value(self,):
+    def test_exact_bool__returns_true__when_user_provided_value_is_equal_to_condition_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             exact_bool_condition_list, {'did_register_user': False}, self.mock_client_logger,
@@ -600,7 +532,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
         self.assertStrictTrue(evaluator.evaluate(0))
 
-    def test_exact_bool__returns_false__when_user_provided_value_is_not_equal_to_condition_value(self,):
+    def test_exact_bool__returns_false__when_user_provided_value_is_not_equal_to_condition_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             exact_bool_condition_list, {'did_register_user': True}, self.mock_client_logger,
@@ -608,7 +540,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
         self.assertStrictFalse(evaluator.evaluate(0))
 
-    def test_exact_bool__returns_null__when_user_provided_value_is_different_type_from_condition_value(self,):
+    def test_exact_bool__returns_null__when_user_provided_value_is_different_type_from_condition_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             exact_bool_condition_list, {'did_register_user': 0}, self.mock_client_logger
@@ -624,7 +556,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
         self.assertIsNone(evaluator.evaluate(0))
 
-    def test_substring__returns_true__when_condition_value_is_substring_of_user_value(self,):
+    def test_substring__returns_true__when_condition_value_is_substring_of_user_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             substring_condition_list, {'headline_text': 'Limited time, buy now!'}, self.mock_client_logger,
@@ -632,7 +564,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
         self.assertStrictTrue(evaluator.evaluate(0))
 
-    def test_substring__returns_false__when_condition_value_is_not_a_substring_of_user_value(self,):
+    def test_substring__returns_false__when_condition_value_is_not_a_substring_of_user_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             substring_condition_list, {'headline_text': 'Breaking news!'}, self.mock_client_logger,
@@ -656,7 +588,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
         self.assertIsNone(evaluator.evaluate(0))
 
-    def test_greater_than_int__returns_true__when_user_value_greater_than_condition_value(self,):
+    def test_greater_than_int__returns_true__when_user_value_greater_than_condition_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             gt_int_condition_list, {'meters_travelled': 48.1}, self.mock_client_logger
@@ -677,7 +609,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
             self.assertStrictTrue(evaluator.evaluate(0))
 
-    def test_greater_than_float__returns_true__when_user_value_greater_than_condition_value(self,):
+    def test_greater_than_float__returns_true__when_user_value_greater_than_condition_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             gt_float_condition_list, {'meters_travelled': 48.3}, self.mock_client_logger
@@ -698,7 +630,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
             self.assertStrictTrue(evaluator.evaluate(0))
 
-    def test_greater_than_int__returns_false__when_user_value_not_greater_than_condition_value(self,):
+    def test_greater_than_int__returns_false__when_user_value_not_greater_than_condition_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             gt_int_condition_list, {'meters_travelled': 47.9}, self.mock_client_logger
@@ -719,7 +651,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
             self.assertStrictFalse(evaluator.evaluate(0))
 
-    def test_greater_than_float__returns_false__when_user_value_not_greater_than_condition_value(self,):
+    def test_greater_than_float__returns_false__when_user_value_not_greater_than_condition_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             gt_float_condition_list, {'meters_travelled': 48.2}, self.mock_client_logger
@@ -947,7 +879,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
             self.assertStrictTrue(evaluator.evaluate(0))
 
-    def test_less_than_float__returns_true__when_user_value_less_than_condition_value(self,):
+    def test_less_than_float__returns_true__when_user_value_less_than_condition_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             lt_float_condition_list, {'meters_travelled': 48.1}, self.mock_client_logger
@@ -968,7 +900,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
             self.assertStrictTrue(evaluator.evaluate(0))
 
-    def test_less_than_int__returns_false__when_user_value_not_less_than_condition_value(self,):
+    def test_less_than_int__returns_false__when_user_value_not_less_than_condition_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             lt_int_condition_list, {'meters_travelled': 48.1}, self.mock_client_logger
@@ -989,7 +921,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
             self.assertStrictFalse(evaluator.evaluate(0))
 
-    def test_less_than_float__returns_false__when_user_value_not_less_than_condition_value(self,):
+    def test_less_than_float__returns_false__when_user_value_not_less_than_condition_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             lt_float_condition_list, {'meters_travelled': 48.2}, self.mock_client_logger
@@ -1042,7 +974,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
         self.assertIsNone(evaluator.evaluate(0))
 
-    def test_less_than_or_equal_int__returns_true__when_user_value_less_than_or_equal_condition_value(self,):
+    def test_less_than_or_equal_int__returns_true__when_user_value_less_than_or_equal_condition_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             le_int_condition_list, {'meters_travelled': 47.9}, self.mock_client_logger
@@ -1075,7 +1007,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
             self.assertStrictTrue(evaluator.evaluate(0))
 
-    def test_less_than_or_equal_float__returns_true__when_user_value_less_than_or_equal_condition_value(self,):
+    def test_less_than_or_equal_float__returns_true__when_user_value_less_than_or_equal_condition_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             le_float_condition_list, {'meters_travelled': 48.1}, self.mock_client_logger
@@ -1102,7 +1034,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
             self.assertStrictTrue(evaluator.evaluate(0))
 
-    def test_less_than_or_equal_int__returns_false__when_user_value_not_less_than_or_equal_condition_value(self,):
+    def test_less_than_or_equal_int__returns_false__when_user_value_not_less_than_or_equal_condition_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             le_int_condition_list, {'meters_travelled': 48.1}, self.mock_client_logger
@@ -1123,7 +1055,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
 
             self.assertStrictFalse(evaluator.evaluate(0))
 
-    def test_less_than_or_equal_float__returns_false__when_user_value_not_less_than_or_equal_condition_value(self,):
+    def test_less_than_or_equal_float__returns_false__when_user_value_not_less_than_or_equal_condition_value(self, ):
 
         evaluator = condition_helper.CustomAttributeConditionEvaluator(
             le_float_condition_list, {'meters_travelled': 48.3}, self.mock_client_logger
@@ -1190,7 +1122,8 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
             return True
 
         with mock.patch(
-            'optimizely.helpers.validator.is_finite_number', side_effect=is_finite_number__rejecting_condition_value,
+                'optimizely.helpers.validator.is_finite_number',
+                side_effect=is_finite_number__rejecting_condition_value,
         ) as mock_is_finite:
             self.assertIsNone(evaluator.evaluate(0))
 
@@ -1203,8 +1136,8 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
             return True
 
         with mock.patch(
-            'optimizely.helpers.validator.is_finite_number',
-            side_effect=is_finite_number__rejecting_user_attribute_value,
+                'optimizely.helpers.validator.is_finite_number',
+                side_effect=is_finite_number__rejecting_user_attribute_value,
         ) as mock_is_finite:
             self.assertIsNone(evaluator.evaluate(0))
 
@@ -1215,7 +1148,7 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
             return True
 
         with mock.patch(
-            'optimizely.helpers.validator.is_finite_number', side_effect=is_finite_number__accepting_both_values,
+                'optimizely.helpers.validator.is_finite_number', side_effect=is_finite_number__accepting_both_values,
         ):
             self.assertTrue(evaluator.evaluate(0))
 
@@ -1233,7 +1166,8 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
             return True
 
         with mock.patch(
-            'optimizely.helpers.validator.is_finite_number', side_effect=is_finite_number__rejecting_condition_value,
+                'optimizely.helpers.validator.is_finite_number',
+                side_effect=is_finite_number__rejecting_condition_value,
         ) as mock_is_finite:
             self.assertIsNone(evaluator.evaluate(0))
 
@@ -1246,8 +1180,8 @@ class CustomAttributeConditionEvaluatorTest(base.BaseTest):
             return True
 
         with mock.patch(
-            'optimizely.helpers.validator.is_finite_number',
-            side_effect=is_finite_number__rejecting_user_attribute_value,
+                'optimizely.helpers.validator.is_finite_number',
+                side_effect=is_finite_number__rejecting_user_attribute_value,
         ) as mock_is_finite:
             self.assertIsNone(evaluator.evaluate(0))
 
